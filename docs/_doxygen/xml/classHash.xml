<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="classHash" kind="class" language="C++" prot="public">
    <compoundname>Hash</compoundname>
    <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classHash_1aeb237cd09f81a8c6d491ec11aba32171" prot="private" static="no" mutable="no">
        <type>uint8_t</type>
        <definition>uint8_t Hash::hashValue[EVP_MAX_MD_SIZE]</definition>
        <argsstring>[EVP_MAX_MD_SIZE]</argsstring>
        <name>hashValue</name>
        <qualifiedname>Hash::hashValue</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Hash.hpp" line="25" column="11" bodyfile="include/Hash.hpp" bodystart="25" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="classHash_1ab37037ae2fc099f05d6f395a0c7425eb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Hash::Hash</definition>
        <argsstring>(void *data, size_t size)</argsstring>
        <name>Hash</name>
        <qualifiedname>Hash::Hash</qualifiedname>
        <param>
          <type>void *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
<para><ref refid="classHash" kindref="compound">Hash</ref> constructor (uses openssl internally) </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to some kind of infomation to be hashed, internally will be converted to a unsigned char array, </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of the data to be hashed (bytes) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Hash.hpp" line="13" column="3"/>
      </memberdef>
      <memberdef kind="function" id="classHash_1a4e4b4797dda8678aaed058bae155813e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Hash::~Hash</definition>
        <argsstring>()</argsstring>
        <name>~Hash</name>
        <qualifiedname>Hash::~Hash</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Hash.hpp" line="14" column="3"/>
      </memberdef>
      <memberdef kind="function" id="classHash_1a6ece7aa6c9e7ba46abaec2ccb476d041" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Hash::operator==</definition>
        <argsstring>(const Hash &amp;hash)</argsstring>
        <name>operator==</name>
        <qualifiedname>Hash::operator==</qualifiedname>
        <param>
          <type>const <ref refid="classHash" kindref="compound">Hash</ref> &amp;</type>
          <declname>hash</declname>
        </param>
        <briefdescription>
<para>Overloading of the equals operator, compares the hash internally. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>hash</parametername>
</parameternamelist>
<parameterdescription>
<para>Compares a hash using openssl </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Hash.hpp" line="17" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classHash_1a812ac703e407b0e820913e62046b41ea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Hash::operator!=</definition>
        <argsstring>(const Hash &amp;hash)</argsstring>
        <name>operator!=</name>
        <qualifiedname>Hash::operator!=</qualifiedname>
        <param>
          <type>const <ref refid="classHash" kindref="compound">Hash</ref> &amp;</type>
          <declname>hash</declname>
        </param>
        <briefdescription>
<para>Overloading of the unequals operator, compares the hash internally. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>hash</parametername>
</parameternamelist>
<parameterdescription>
<para>Compares a hash using openssl </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Hash.hpp" line="20" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classHash_1a4d42f47d78fa9b5ce4878e67a357ffa4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classHash" kindref="compound">Hash</ref> &amp;</type>
        <definition>Hash &amp; Hash::operator=</definition>
        <argsstring>(const Hash &amp;hash)</argsstring>
        <name>operator=</name>
        <qualifiedname>Hash::operator=</qualifiedname>
        <param>
          <type>const <ref refid="classHash" kindref="compound">Hash</ref> &amp;</type>
          <declname>hash</declname>
        </param>
        <briefdescription>
<para>Overloading of the asignment operator. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>hash</parametername>
</parameternamelist>
<parameterdescription>
<para>Assigns a hash, by changing the internal structure </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Hash.hpp" line="23" column="8"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="include/Hash.hpp" line="7" column="1" bodyfile="include/Hash.hpp" bodystart="7" bodyend="26"/>
    <listofallmembers>
      <member refid="classHash_1ab37037ae2fc099f05d6f395a0c7425eb" prot="public" virt="non-virtual"><scope>Hash</scope><name>Hash</name></member>
      <member refid="classHash_1aeb237cd09f81a8c6d491ec11aba32171" prot="private" virt="non-virtual"><scope>Hash</scope><name>hashValue</name></member>
      <member refid="classHash_1a812ac703e407b0e820913e62046b41ea" prot="public" virt="non-virtual"><scope>Hash</scope><name>operator!=</name></member>
      <member refid="classHash_1a4d42f47d78fa9b5ce4878e67a357ffa4" prot="public" virt="non-virtual"><scope>Hash</scope><name>operator=</name></member>
      <member refid="classHash_1a6ece7aa6c9e7ba46abaec2ccb476d041" prot="public" virt="non-virtual"><scope>Hash</scope><name>operator==</name></member>
      <member refid="classHash_1a4e4b4797dda8678aaed058bae155813e" prot="public" virt="non-virtual"><scope>Hash</scope><name>~Hash</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
